<div id="taskFundModal" class="modal-default modal-fund" role="dialog" tabindex="-1">
  <div id="fund-loading"><%= t('commons.loading') %><%= image_tag("loading.gif", :alt => "rss feed") %> </div>
  <div class="modal-fund__inner">

    <div class="modal-fund__content">
      <div class="modal-fund__top">
        <button type="button" class="modal-default__close"></button>
        <h4 class="modal-default__title"><%= t('.title') %></h4>

        <div class="modal-fund__form-wrap" id="user-btc-view">
            <div class="f-default__row modal-fund__tabs-wrapper">
                <button type="button" class="modal-fund__tab js-change-payment-type _wallet _bitcoin" id="save-wallet-teansaction" value="save">Donate with bitcoin</button>
                <button type="button" class="modal-fund__tab js-change-payment-type _active _credit" id="donate-with-credit-card" value="save">Donate with credit card</button>
            </div>
            <div class="f-default__row">
              <%= form_tag("/user_wallet_transactions/send_to_task_address", method: "post", remote: true , class: 'f-default f-donate') do %>
                <input type="hidden" id="wallet_transaction_task_id" name="task_id"  required class="form-control"/>
                <label class="f-default__label" for="wallet_transaction_amount">
                    <%= t('commons.enter') %>
                    <span class="js-current-currency"><%= t('commons.usd') %></span>
                    <%= t('.amount_to_send') %>
                    <span class="modal-fund__needed _btc"></span>
                    <span class="modal-fund__needed _usd _active"></span>
                    </label>
                <input type="number" step="0.001" min="<%= min_fund_budget_in_btc %>" autocomplete="off" id="wallet_transaction_amount" name="amount" class="f-default__field modal-fund__input" required/>
                <span id="wallet_btc" class="modal-fund__convert"></span>
                <span class="modal-fund__min-donation"></span>
              <% end %>
            </div>
        </div>
      </div>

      <div class="modal-fund__bottom">
        <div class="modal-fund__bottom-content">
          <div class="modal-fund__tabs">
            <div class="modal-fund__tab-wrap">
              <button class="modal-fund__tab" type="button"><%= t('.use_weserve_wallet') %></button>
            </div>

          <% if user_signed_in? %>
              <div class="modal-fund__content-wrap">
                <div class="modal-fund__tab-content">

                  <div class="modal-fund__signed">
                    <div class="modal-fund__signed-label">
                        <span><%= t('commons.sign_in_as') %></span>
                        <span class="modal-fund__user-name"><%= current_user.display_name %></span>
                        <%= link_to t('commons.not_you?'), destroy_user_session_path, :method => 'delete', :class => 'modal-fund__wrong-user btn-reset' %>
                    </div>
                    <% if current_user.picture? %>
                        <%= image_tag(current_user.picture, class: "modal-fund__avatar") %>
                    <% else %>
                        <%= gravatar_for_user(current_user, 44) %>
                    <% end %>
                    <div class="modal-fund__field-wrap">
                      <div class="modal-fund__balance"><%= t('commons.btc_wallet') %> (<%= satoshi_balance_in_btc(current_user.current_wallet_balance) %>)</div>
                      <svg focusable="false" version="1.1" class="svg-wallet" aria-hidden="true">
                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#svg-wallet"></use>
                      </svg>
                    </div>

                    <a class="modal-fund__wallet" href="/users/<%= current_user.id %>/my_wallet"><%= t('commons.my_wallet') %></a>
                  </div>
              </div>
            </div>
            <button type="button" class="btn-root _donate _dark _disable"><%= t('.donate') %><span class="modal-fund__donate-value js-btc-amount">0.00</span></button>
          <% else %>
            <button type="button" class="btn-root _sign-in _dark"><%= t('commons.sign_in') %></button>
          <% end %>

          </div>
        </div>
        <div class="modal-fund__bottom-content _active">
          <div class="modal-fund__stripe">
            <% if user_signed_in? %>
              <%= render :template => '/payments/stripe/new' %>
            <% else %>
              <button type="button" class="btn-root _sign-in _dark"><%= t('commons.sign_in') %></button>
            <% end %>
          </div>
        </div>
      </div>

      <!-- todo BE: do you need this?
      <h4 class="modal-title" id="wallet-address"></h4>
      <span class="modal-fund__current-fund">Current Fund: <span id="task-balance"></span></span>
      <div class="modal-fund__wallet-response" style="background-color: darkorange;font-size: large ;margin:0 3%"  id="response-from-wallet"></div>
      <div id="coin-base-widget"> </div>  -->


    </div>
  </div>
</div>

<script type="text/javascript" src="https://js.stripe.com/v2/"></script>
<script>

  $(document).ready(function() {


    var MIN_DONATION_BTC = parseFloat('<%= min_fund_budget_in_btc %>').toFixed(3),
        CURRENT_BTC_RATE = parseFloat('<%= Payments::BTC::Converter.current_btc_rate  %>').toFixed(2);

    Stripe.setPublishableKey('<%= Rails.configuration.stripe[:publishable_key] %>');

    var $walletTransactionAmount = $('#wallet_transaction_amount'),
        $btcValue = $('.js-btc-value'),
        $usdValue = $('.js-usd-value'),
        $currentCurrency = $('.js-current-currency'),
        $cardNumber = $('#card_number'),
        $cardExpiry = $('#card_expiry'),
        $jsCardNumber = $('.js-card-number'),
        $donateBtn = $('.btn-root._donate'),
        $jsAmount = $('.js-amount'),
        $creditCardTab = $('.js-change-payment-type._credit'),
        $bitcoinTab = $('.js-change-payment-type._bitcoin'),
        $errorFundModal = $('#errorFundModal'),
        donationObj = {
          amount: {
            usd: 0,
            btc: 0
          },
          isUSD: true
        };

    function stripeResponseHandler(status, response) {
      // Grab the form:
      var $form = $('#payment-form');

      if (response.error) { // Problem!
        // Show the errors on the form:
        $form.find('.modal-fund__payment-errors').text(response.error.message);
        $form.find('.modal-fund__payment-errors').show();
        $form.find('.js-submit-cc').prop('disabled', false); // Re-enable submission
        $('.btn-root._donate').removeClass('_disable');
      } else { // Token was created!
        // Get the token ID:
        sendCreditCardDonate(response.id);
      }
    };

    function getCurrency() {
      return donationObj.isUSD ? 'USD' : '฿';
    }

    function getConvertedCurrency() {
      return !donationObj.isUSD ? 'USD' : '฿';
    }


    function CopyToClipboard(containerid) {
      if (document.selection) {
          var range = document.body.createTextRange();
          range.moveToElementText(document.getElementById(containerid));
          range.select().createTextRange();
          document.execCommand("Copy");
      } else if (window.getSelection) {
          var selection = window.getSelection();
          var range = document.createRange();
          range.selectNode(document.getElementById(containerid));
          selection.removeAllRanges();
          window.getSelection().addRange(range);
          document.execCommand("Copy");
      }
    }

    $(document)
        .on('click.copyWallet', '._copy-address', function () {
          CopyToClipboard('wallet_address');
        })
        .on('click.changePaymentType', '.js-change-payment-type', function () {
          var $that = $(this),
              index = $that.index();

          $that.addClass('_active').siblings().removeClass('_active');
          donationObj.isUSD = index === 1;

          if (donationObj.isUSD) {
            $('.modal-fund__needed._usd').addClass('_active');
            $('.modal-fund__needed._btc').removeClass('_active');
          } else {
            $('.modal-fund__needed._usd').removeClass('_active');
            $('.modal-fund__needed._btc').addClass('_active');
          }

          $currentCurrency.text(getCurrency());
          $walletTransactionAmount.trigger('keyup');

          $('.modal-fund__bottom-content').removeClass('_active').eq(index).addClass('_active');
          $walletTransactionAmount.val('');
          $('.js-btc-amount').html('');
          $('.modal-fund__min-donation').html('');
          updateConversion();
          $donateBtn.addClass('_disable');
        })
        .on('click.termOfUseClick', '.payment-form__method', function() {
            var $this = $(this),
                donateValue = $('.modal-fund__input').val(),
                $donateBtn = $('.btn-root._donate');

            if (donateValue && $this.is(':checked')) {
                $donateBtn.removeClass('_disable');
            } else {
                $donateBtn.addClass('_disable');
            }
        })
        .on('input.inputAmount', '.modal-fund__input', function() {
            var currentValue = $(this).val(),
                $donateBtn = $('.btn-root._donate'),
                isTermOfUseChecked = $('.payment-form__method').is(':checked'),
                $minDonation = $('.modal-fund__min-donation');

            if (donationObj.isUSD && (parseFloat(currentValue) < parseFloat(MIN_DONATION_BTC * CURRENT_BTC_RATE))) {
                $minDonation.html('Min. donation is ' + parseFloat(MIN_DONATION_BTC * CURRENT_BTC_RATE) + '$');
            } else if (!donationObj.isUSD && (parseFloat(currentValue) < parseFloat(MIN_DONATION_BTC))) {
                $minDonation.html('Min. donation is ' + parseFloat(MIN_DONATION_BTC) + '฿');
            } else {
                $minDonation.html('');
            }

            if (currentValue && (!donationObj.isUSD || isTermOfUseChecked)) {
                $donateBtn.removeClass('_disable');
            } else {
                $donateBtn.addClass('_disable');
            }
        })
        .on('keyup.updateDonation', '#wallet_transaction_amount', function () {
          var val = $(this).val();
          !val && (val = '0.00');
          $('.js-usd-value').text(val);
          $('.js-btc-amount').text(val);
        })
        <% if user_signed_in? %>
          .on('click.sendForm', '.btn-root._donate', function () {
            var val = $walletTransactionAmount.val(),
                $donateBtn = $('.btn-root._donate'),
                isTermOfUseChecked = $('.payment-form__method').is(':checked');

            if (donationObj.isUSD && !isTermOfUseChecked) {
                $('.f-default__checkbox-pseudo').addClass('_error');
                return;
            } else {
                $('.f-default__checkbox-pseudo').removeClass('_error');
            }

            if (val && (!donationObj.isUSD || isTermOfUseChecked)) {
                $donateBtn.addClass('_disable');
                if ($creditCardTab.hasClass('_active')) {
                    setTimeout(function() {
                        createStripeToken();
                    }, 0);
                } else {
                    sendBitcoinDonate();
                }
            }
          })
        <% end %>

        function createStripeToken() {
            Stripe.card.createToken($("#payment-form"), stripeResponseHandler);
        }

        function sendCreditCardDonate(token) {
            $.ajax({
                url: $('#payment-form').attr('action'),
                method: 'POST',
                data: {
                    stripeToken: token,
                    amount: $('.payment-form__amount').val(),
                    card_id: $('.available-cards-radio-button').val(),
                    save_card: $('.payment-form__save-card').val(),
                    method: $('.payment-form__method').val()
                }
            })
            .success(function(res) {
                handleSuccess(res);
            })
            .error(function(error) {
                handleError(error);
            })
        }

        function sendBitcoinDonate() {
            $.ajax({
                url: '/user_wallet_transactions/send_to_task_address',
                method: 'POST',
                data: {
                    task_id: $('#wallet_transaction_task_id').val(),
                    amount: $('#wallet_transaction_amount').val()
                }
            })
            .success(function(res) {
                handleSuccess(res);
            })
            .error(function(error) {
                handleError(error);
            })
        }

        function handleSuccess(response) {
            $walletTransactionAmount.val('');
            $('.btn-root._donate').addClass('_disable');
            $errorFundModal.find('.error-fund-modal__message').text(response.success);
            $errorFundModal.find('.error-fund-modal__title').removeClass('_error').addClass('_success').text('Success!');
            showFundModal();
        }

        function handleError(response) {
            $('.btn-root._donate').removeClass('_disable');
            $errorFundModal.find('.error-fund-modal__message').text(response.responseJSON.error);
            $errorFundModal.find('.error-fund-modal__title').removeClass('_success').addClass('_error').text('Error');
            showFundModal();
        }

        function showFundModal() {
            $errorFundModal.fadeIn();
            $('html').addClass('_open-modal');
        }

        function updateConversion(event) {
          document.getElementById("wallet_btc").innerHTML = '';
          var value = +document.getElementById("wallet_transaction_amount").value;
          var current_btc = '<%= Payments::BTC::Converter.current_btc_rate  %>';
          var btc = donationObj.isUSD ? value / current_btc : value;
          var usd = (donationObj.isUSD ? value : value * current_btc).toFixed(2);
          if (donationObj.isUSD) {
            document.getElementById("wallet_btc").innerHTML= usd + " USD = " + btc + " ฿";
          } else {
            document.getElementById("wallet_btc").innerHTML= btc + " ฿ = " + usd + " USD";
          }
          $btcValue.text(btc.toFixed(5));
          $usdValue.text(usd);
          event && event.preventDefault();
        }

        // todo FD: check all this js, do we need this after fund modal will be implemented?
        $walletTransactionAmount
          .on('keypress', function(eve) {
            if(eve.which == 8 || eve.which == 0){
              return true;
            }
            if ((eve.which != 46 || $(this).val().indexOf('.') != -1) && (eve.which < 48 || eve.which > 57)) {
              updateConversion(eve);
            }
          })
          // this part is when left part of number is deleted and leaves a . in the leftmost position. For example, 33.25, then 33 is deleted
          .on('keyup', function(eve) {
            var currentVal = $(this).val();
            if(currentVal.indexOf('.') == 0) {
              $(this).val(currentVal.substring(1));
            }
            $jsAmount.val(currentVal);
            updateConversion(eve);
          });
        $cardNumber
          .on('keyup', function() {
            var currentVal = $(this).val().replace(/\s/g, '');
            $jsCardNumber.val(currentVal);
            detectCard(currentVal);
          });
        $cardExpiry
          .on('keyup', function() {
            var valArr = $(this).val().split('');
            $('[data-stripe="exp_month"]').val(valArr[0] + valArr[1]);
            $('[data-stripe="exp_year"]').val(valArr[5] + valArr[6]+valArr[7] + valArr[8]);
          });

        $('#save-wallet-teansaction').click(function () {
          if ($("#wallet_transaction_task_id").val() != '' && $("#wallet_transaction_task_id").val() != '') {
            $('#save-wallet-teansaction').disabled = true;
            $('#response-from-wallet').html("");
            $('#response-from-wallet').html("Requesting ... please Wait ");
          }
        });

        $(".close-reveal-modal").click(function () {
          $('#response-from-wallet').html("");
        });
        $("#donate-with-credit-card").click(function () {
          $('#stripe-view').show();
        });


        var $cardWrap = $('.f-default__card-wrap');

        function detectCard(str) {
          var firstLetter = +str[0];
          var twoFirstLetters = +(firstLetter + '' + str[1]);
          var threeFirstLetters = +(twoFirstLetters + '' + str[2]);
          var fourFirstLetters = +(threeFirstLetters + '' + str[3]);
          var sixFirstLetters = +(fourFirstLetters + '' + str[4] + str[5]);
          console.log(twoFirstLetters, threeFirstLetters, fourFirstLetters, sixFirstLetters);

          if (twoFirstLetters == 34 || twoFirstLetters == 37) {
              $cardWrap.find('img').removeClass('_active').filter('._ae').addClass('_active');
          } else if (twoFirstLetters >= 50 && twoFirstLetters <= 55) {
              $cardWrap.find('img').removeClass('_active').filter('._mc').addClass('_active');
          } else if (firstLetter == 4) {
              $cardWrap.find('img').removeClass('_active').filter('._visa').addClass('_active');
          } else if (fourFirstLetters >= 3528 && fourFirstLetters <= 3589) {
              $cardWrap.find('img').removeClass('_active').filter('._jcb').addClass('_active');
          } else if (twoFirstLetters == 65 ||
                     fourFirstLetters == 6011 ||
                     threeFirstLetters >= 644 && threeFirstLetters <= 649 ||
                     sixFirstLetters >= 62216 && sixFirstLetters <= 622925) {
              $cardWrap.find('img').removeClass('_active').filter('._discover').addClass('_active');
          } else if (twoFirstLetters == 36 || twoFirstLetters == 38 || twoFirstLetters == 39 ||
                     fourFirstLetters == 6011 ||
                     threeFirstLetters >= 300 && threeFirstLetters <= 305 || threeFirstLetters == 309) {
              $cardWrap.find('img').removeClass('_active').filter('._dc').addClass('_active');
          } else {
              $cardWrap.find('img').removeClass('_active');
          }
        }
  })
</script>
