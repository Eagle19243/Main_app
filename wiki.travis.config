
# == Roles & Permissions ==
$wgGroupPermissions['user']['edit'] = true; # Allow users to edit pages
$wgGroupPermissions['user']['move'] = true; # Allow users to move pages
$wgGroupPermissions['user']['delete'] = true; # Allow users to delete pages

# == ApprovedRevs settings ==
require_once( "$IP/extensions/ApprovedRevs/ApprovedRevs.php" );

$wgGroupPermissions['sysop']['approverevisions'] = true; # Allow 'sysop's to any approve revision
$wgGroupPermissions['moderator']['approverevisions'] = true; # Allow 'moderator's to any approve revision
$wgGroupPermissions['*']['viewlinktolatest'] = false; # Disallow visitors to see latest unapproved revisions
$wgGroupPermissions['user']['viewlinktolatest'] = false; # Disallow normal users to see latest unapproved revisions
$wgGroupPermissions['sysop']['viewlinktolatest'] = true; # Allow sysops to see latest unapproved revisions
$wgGroupPermissions['moderator']['viewlinktolatest'] = true; # Allow moderators to see latest unapproved revisions
$egApprovedRevsAutomaticApprovals = true; # Explictly enable automatic approvals
$egApprovedRevsNamespaces = array( NS_MAIN ); # Limit approval actions by namespace
$egApprovedRevsSelfOwnedNamespaces = array( NS_MAIN ); # Grant approve right for page owners
$egApprovedRevsBlankIfUnapproved = false; # Required by automatic approvals and why not overall ?

wfLoadExtension('WeServeSSO');

$wgMemCachedServers = array( "127.0.0.1:11211" );
require_once "$IP/extensions/OAuth/OAuth.php";

$wgGroupPermissions['sysop']['mwoauthproposeconsumer'] = true;
$wgGroupPermissions['sysop']['mwoauthupdateownconsumer'] = true;
$wgGroupPermissions['sysop']['mwoauthmanageconsumer'] = true;
$wgGroupPermissions['sysop']['mwoauthsuppress'] = true;
$wgGroupPermissions['sysop']['mwoauthviewsuppressed'] = true;
$wgGroupPermissions['sysop']['mwoauthviewprivate'] = true;
$wgGroupPermissions['sysop']['mwoauthmanagemygrants'] = true;

wfLoadExtension('WeServeAPI');
$wgGroupPermissions['sysop']['weserveapi'] = true;
$wgGroupPermissions['bot']['weserveapi'] = true;
$wgGroupPermissions['user']['weserveapi'] = true;

# Important: to use users emails as usernames
$wgUserrightsInterwikiDelimiter = "%";
$wgInvalidUsernameCharacters = "%:";

# Allows automatic account creation for SSO/API
$wgGroupPermissions['*']['autocreateaccount'] = true;
$wgGroupPermissions['bot']['autocreateaccount'] = true;
$wgGroupPermissions['user']['autocreateaccount'] = true;
$wgGroupPermissions['sysop']['autocreateaccount'] = true;

$wgDebugLogFile = "$IP/debug.txt";

wfLoadExtension( 'VisualEditor' );

// Enable by default for everybody
$wgDefaultUserOptions['visualeditor-enable'] = 1;

// Optional: Set VisualEditor as the default for anonymous users
// otherwise they will have to switch to VE
// $wgDefaultUserOptions['visualeditor-editor'] = "visualeditor";

// Don't allow users to disable it
$wgHiddenPrefs[] = 'visualeditor-enable';

$wgVirtualRestConfig['modules']['parsoid'] = array(
// URL to the Parsoid instance
// Use port 8142 if you use the Debian package
'url' => 'http://localhost:8142',
// Parsoid "domain", see below (optional)
'domain' => 'localhost',
// Parsoid "prefix", see below (optional)
//'prefix' => 'localhost'
);

$wgResourceLoaderDebug = true;

wfLoadSkin('Weserve');
$wgShowExceptionDetails = true;
$wgVisualEditorSupportedSkins[] = 'weserve';
$wgVisualEditorDisableForAnons = true;

$wgShowExceptionDetails = true;
$wgShowSQLErrors = true;

$wgCrossSiteAJAXdomains = array( '*' );

$wgSecretKey = "FE79A0302274D30B35690EDB598AC5591E588692046D36FC002F31788D870632";
$wgSessionInsecureSecrets = true;